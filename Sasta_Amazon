import mysql.connector
from mysql.connector import Error
import random
import datetime



def add_product_to_cart(conn, cart_id, pname):
    try:
        cursor = conn.cursor()

        # Check the quantity of the product in the Product table
        cursor.execute("SELECT COUNT(*) FROM Product WHERE name = %s", (pname,))
        quantity = cursor.fetchone()[0]

        if quantity > 0:
            # Insert the product into the Contains_Products table
            sql_query = """
            INSERT INTO Contains_Products (cart_id, product_id)
            SELECT c.cart_id, p.product_id
            FROM Cart c
            JOIN Product p ON p.name = %s
            LEFT JOIN Contains_Products cp ON c.cart_id = cp.cart_id AND p.product_id = cp.product_id
            WHERE c.cart_id = %s AND cp.cart_id IS NULL
            LIMIT 1;
            """
            cursor.execute(sql_query, (pname, cart_id))

            # Update final_amount, total_value, and product_count in the Cart table
            update_query = """
            UPDATE Cart
            SET total_value = (SELECT SUM(price) FROM Product WHERE product_id IN (SELECT product_id FROM Contains_Products WHERE cart_id = %s)),
                product_count = (SELECT COUNT(*) FROM Contains_Products WHERE cart_id = %s)
            WHERE cart_id = %s;
            """
            cursor.execute(update_query, (cart_id, cart_id, cart_id))

            cursor.execute("Select offer_id from Cart where cart_id=%s",(cart_id,))
            offer_id=cursor.fetchone()[0]
            cursor.execute("Select total_value from Cart where cart_id=%s",(cart_id,))
            total_value=cursor.fetchone()[0]
            # Check if there is an applied offer
            if offer_id:
                # Fetch offer details
                cursor.execute("SELECT maximum_discount, percentage_discount FROM Special_Offers WHERE offer_id = %s", (offer_id,))
                offer_details = cursor.fetchone()
                max_discount, percentage_discount = offer_details

                percentage_discount = float(percentage_discount)
                max_discount = float(max_discount)
                # Apply offer
                if total_value * percentage_discount / 100 > max_discount:
                    final_amount = total_value - max_discount
                else:
                    final_amount = total_value - (total_value * percentage_discount / 100)

                # Update final amount of the cart
                cursor.execute("UPDATE Cart SET final_amount = %s WHERE cart_id = %s", (final_amount, cart_id))

                print("Cart updated with new total value and final amount after applying offer.")
            else:
                # No offer applied, final amount equals total value
                cursor.execute("UPDATE Cart SET final_amount = %s WHERE cart_id = %s", (total_value, cart_id))
                print("Cart updated with new total value.")       
            print("Product added to cart")
            conn.commit()
        else:
            print("Product is out of stock")
    except Error as e:
        conn.rollback()
        print("Error adding product to cart:", e)


def print_all_categories(cursor):
    try:
        cursor.execute("SELECT Name FROM Category")
        categories = cursor.fetchall()

        # Print header
        print("Categories:")
        for category in categories:
            print(category[0])
    except Error as e:
        print("Error fetching categories:", e)

def print_products_by_category(cursor, category_name):
    try:
        cursor.execute("""
            SELECT p.name, p.brand, p.price, COUNT(*) as quantity, p.availaiblity_status
            FROM Product p 
            INNER JOIN Category c ON p.category_id = c.category_id 
            WHERE c.Name = %s
            GROUP BY p.name, p.brand, p.price, p.availaiblity_status
        """, (category_name,))
        products = cursor.fetchall()

        # Print header
        print("\nProducts in '{}' category:".format(category_name))
        print("{:<20} {:<20} {:<10} {:<10} {:<10}".format(
            "Name", "Brand", "Price", "Quantity", "Availability"))

        # Print each product
        for product in products:
            name, brand, price, quantity, availability = product
            print("{:<20} {:<20} ${:<10.2f} {:<10} {}".format(
                name, brand, price, quantity, "Available" if availability else "Not Available"))
    except Error as e:
        print("Error fetching products:", e)


def view_order_status(conn, customer_id):
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT O.order_id FROM Order_ O JOIN Cart C ON O.cart_id = C.cart_id WHERE C.customer_id = %s",(customer_id,))
        data=cursor.fetchall()
        
        for i in data:
            # Execute SQL query to fetch order details
            cursor.execute("SELECT order_id, order_time, quantity, shipping_address, order_date,amount FROM Order_ WHERE order_id = %s", (i[0],))
            order_details = cursor.fetchone()

            if order_details:
                order_id, order_time, quantity, shipping_address, order_date,amount = order_details
                print("Order ID: {}".format(order_id))
                print("Order Time: {}".format(order_time))
                print("Quantity: {}".format(quantity))
                print("Shipping Address: {}".format(shipping_address))
                print("Order Date: {}".format(order_date))
                print("Amount: {}".format(amount))
                print("-----------------------------------------------------")
            else:
                print("Order with ID {} not found.".format(order_id))

    except Error as e:
        print("Error fetching order status:", e)




def view_cart(cursor,cart_id):
                            cursor.execute("""
                                SELECT cp.cart_id, cp.product_id, p.name, p.brand, p.price
                                FROM Contains_Products cp
                                JOIN Product p ON cp.product_id = p.product_id
                                WHERE cp.cart_id = %s
                            """, (cart_id,))
                            cart_products = cursor.fetchall()
                            if cart_products:
                                print("Products in Cart:")
                                for product in cart_products:
                                    print("Product ID:", product[1])
                                    print("Name:", product[2])
                                    print("Brand:", product[3])
                                    print("Price:", product[4])
                                    print("------------------------------")
                                cursor.execute("UPDATE Cart SET total_value = (SELECT SUM(p.price) FROM Contains_Products cp JOIN Product p ON cp.product_id = p.product_id WHERE cp.cart_id = Cart.cart_id) WHERE cart_id = %s;", (cart_id,))                                
                                cursor.execute("Select total_value, final_amount from Cart where cart_id=%s",(cart_id,))
                                results=cursor.fetchone()
                                if results[0]<results[1]:
                                    cursor.execute("UPDate cart set final_amount=%s where cart_id=%s",(results[0],cart_id))
                                    print("Total value of cart before applying coupon is: ",results[0])
                                    print("Total value of cart after applying coupon is: ",results[0])
                                else:
                                    print("Total value of cart before applying coupon is: ",results[0])
                                    print("Total value of cart after applying coupon is: ",results[1])                                    
                            else:
                                print("No products found in the cart.")                            


def remove_product_from_cart(conn, cart_id, pname):
    try:
        cursor = conn.cursor()

        cursor.execute("""
        SELECT p.product_id
        FROM Product p
        JOIN Contains_Products cp ON p.product_id = cp.product_id
        WHERE cp.cart_id = %s AND p.name = %s
        LIMIT 1
        """, (cart_id, pname))
        product_id = cursor.fetchone()

        if product_id:
            # Remove the product from the Contains_Products table
            cursor.execute("""
            DELETE FROM Contains_Products
            WHERE cart_id = %s AND product_id = %s
            """, (cart_id, product_id[0]))

            # Update final_amount, total_value, and product_count in the Cart table
            update_query = """
            UPDATE Cart
            SET total_value = (SELECT SUM(price) FROM Product WHERE product_id IN (SELECT product_id FROM Contains_Products WHERE cart_id = %s)),
            product_count = (SELECT COUNT(*) FROM Contains_Products WHERE cart_id = %s)
            WHERE cart_id = %s;
            """
            cursor.execute(update_query, (cart_id, cart_id, cart_id))
            
            # Check if there is an applied offer and if the coupon is still applicable
            cursor.execute("SELECT offer_id, total_value FROM Cart WHERE cart_id = %s", (cart_id,))
            offer_id, total_value = cursor.fetchone()
            print(total_value)
            if total_value==None:
                cursor.execute("UPDATE Cart SET final_amount = 1 and offer_id=0 WHERE cart_id = %s", (cart_id,))
                print("Product removed from cart")
                return 
            if offer_id:
                cursor.execute("""
                SELECT minimum_order_value, maximum_discount, percentage_discount
                FROM Special_Offers
                WHERE offer_id = %s
                """, (offer_id,))
                offer_details = cursor.fetchone()
                min_order_value, max_discount, percentage_discount = offer_details

                min_order_value = float(min_order_value)
                max_discount = float(max_discount)
                percentage_discount = float(percentage_discount)

                if total_value >= min_order_value:
                    if total_value * percentage_discount / 100 > max_discount:
                        final_amount = total_value - max_discount
                    else:
                        final_amount = total_value - (total_value * percentage_discount / 100)

                    # Update final amount of the cart
                    cursor.execute("UPDATE Cart SET final_amount = %s WHERE cart_id = %s", (final_amount, cart_id))
                else:
                    # Coupon is no longer applicable due to minimum order value not being met
                    cursor.execute("UPDATE Cart SET offer_id = 1 WHERE cart_id = %s", (cart_id,))
                    print("Coupon is no longer applicable due to minimum order value not being met.")

            print("Product removed from cart")
            conn.commit()
        else:
            print("Product not found in the cart")

    except Error as e:
        conn.rollback()
        print("Error removing product from cart:", e)


def add_delivery_boy(first_name, last_name, mobile_number, email_id, rating, salary, ofc_id, admin_id,orders_delivered):
    conn = connect_to_database()
    cursor = conn.cursor()
    
    # Insert delivery boy data into Delivery_Boy table
    cursor.execute("""
        INSERT INTO Delivery_Boy (first_name, last_name, mobile_number, email_id, rating, salary, ofc_id, admin_id, orders_delivered)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
    """, (first_name, last_name, mobile_number, email_id, rating, salary, ofc_id, admin_id, orders_delivered))
    
    conn.commit()
    conn.close()
    print("Delivery boy added successfully.")

# Function to add a worker
def add_worker(salary, email, mobile, first_name, last_name, admin_id):
    conn = connect_to_database()
    cursor = conn.cursor()
    
    # Insert worker data into Worker table
    cursor.execute("""
        INSERT INTO Worker (salary, email, mobile, first_name, last_name, admin_id)
        VALUES (%s, %s, %s, %s, %s, %s)
    """, (salary, email, mobile, first_name, last_name, admin_id))
    
    conn.commit()
    conn.close()
    print("Worker added successfully.")

# Function to add a special offer
def add_special_offer(offer_code, maximum_discount, percentage_discount, minimum_order_value, admin_id):
    conn = connect_to_database()
    cursor = conn.cursor()
    
    # Insert special offer data into Special_Offers table
    cursor.execute("""
        INSERT INTO Special_Offers (offer_code, maximum_discount, percentage_discount, minimum_order_value, admin_id)
        VALUES (%s, %s, %s, %s, %s)
    """, (offer_code, maximum_discount, percentage_discount, minimum_order_value, admin_id))
    
    conn.commit()
    conn.close()
    print("Special offer added successfully.")

# Function to remove a special offer
def remove_special_offer(offer_id):
    conn = connect_to_database()
    cursor = conn.cursor()
    
    # Delete special offer from Special_Offers table
    cursor.execute("""
        DELETE FROM Special_Offers
        WHERE offer_id = %s
    """, (offer_id,))
    
    conn.commit()
    conn.close()
    print("Special offer removed successfully.")

# Function to add a seller
def add_seller(password, email, phone_number, first_name, last_name, admin_id):
    conn = connect_to_database()
    cursor = conn.cursor()
    
    # Insert seller data into Seller table
    cursor.execute("""
        INSERT INTO Seller (password, email, phone_number, first_name, last_name, admin_id)
        VALUES (%s, %s, %s, %s, %s, %s)
    """, (password, email, phone_number, first_name, last_name, admin_id))
    
    conn.commit()
    conn.close()
    print("Seller added successfully.")

# Function to remove a seller
def remove_seller(seller_id):
    conn = connect_to_database()
    cursor = conn.cursor()
    
    # Delete seller from Seller table
    cursor.execute("""
        DELETE FROM Seller
        WHERE seller_id = %s
    """, (seller_id,))
    
    conn.commit()
    conn.close()
    print("Seller removed successfully.")

# Function to view all orders
def view_all_orders():
    conn = connect_to_database()
    cursor = conn.cursor()
    
    # Retrieve all orders from Order_ table
    cursor.execute("""
        SELECT *
        FROM Order_
    """)
    
    orders = cursor.fetchall()
    
    # Print or display orders
    for order in orders:
        print(order)


def view_products(conn):
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT name, brand, price, COUNT(*) as quantity, availaiblity_status
            FROM Product
            GROUP BY name, brand, price, availaiblity_status
        """)
        products = cursor.fetchall()

        # Print header
        print("{:<20} {:<20} {:<10} {:<10} {:<10}".format(
            "Name", "Brand", "Price", "Quantity", "Availability"))

        # Print each product
        for product in products:
            name, brand, price, quantity, availability = product
            print("{:<20} {:<20} ${:<10.2f} {:<10} {}".format(
                name, brand, price, quantity, "Available" if availability else "Not Available"))
    except Error as e:
        print("Error fetching products:", e)

    
"""--------------------------------------------------------------------------------------------------"""
def view_all_special_offers(cursor):
    try:
        # Execute SQL query to fetch all special offers
        cursor.execute("SELECT * FROM Special_Offers")

        # Fetch all rows
        special_offers = cursor.fetchall()

        # Check if there are any offers
        if special_offers:
            # Print header
            print("All Special Offers:")
            print("{:<10} {:<15} {:<20} {:<20} {:<25}".format(
                "Offer ID", "Offer Code", "Max Discount", "Percentage Discount", "Min Order Value"))
            
            # Print each special offer
            for offer in special_offers:
                offer_id, offer_code, max_discount, percentage_discount, min_order_value, _ = offer
                print("{:<10} {:<15} {:<20} {:<20} {:<25}".format(
                    offer_id, offer_code, f"${max_discount:.2f}", f"{percentage_discount}%", f"${min_order_value:.2f}"))
        else:
            print("No special offers available.")
    except mysql.connector.Error as error:
        print("Error:", error)

def apply_special_offer(conn, customer_id, cart_id,offer_code):
    try:
        cursor=conn.cursor()
        # Execute SQL query to fetch the special offer details based on the offer code
        cursor.execute("SELECT * FROM Special_Offers WHERE offer_code = %s", (offer_code,))
        special_offer = cursor.fetchone()

        if special_offer:
            offer_id, offer_code, max_discount, percentage_discount, min_order_value, _ = special_offer
            percentage_discount = float(percentage_discount)
            # Fetch the total amount of the current cart
            cursor.execute("SELECT total_value FROM Cart WHERE customer_id = %s AND cart_id = %s", (customer_id, cart_id))
            total_amount = cursor.fetchone()[0]

            if total_amount >= min_order_value:
                # Apply the offer on the cart
                if percentage_discount > 0:
                    # Apply percentage discount
                    discount_amount = total_amount * percentage_discount / 100
                    if discount_amount > max_discount:
                        discount_amount = max_discount
                else:
                    # Apply maximum discount directly
                    discount_amount = max_discount
                fin_a=total_amount-discount_amount
                # Update the cart with the discount amount
                cursor.execute("UPDATE Cart SET final_amount = %s WHERE customer_id = %s AND cart_id = %s", (fin_a, customer_id, cart_id))
                print("Offer applied successfully.")
            else:
                print("Minimum order value not reached. Offer cannot be applied.")
        else:
            print("Invalid offer code.")

    except mysql.connector.Error as error:
        print("Error:", error)

"""--------------------------------------------------------------------------------------------------"""
def view_deals(conn, cursor):
    # Prepare and execute SQL statement to view deals with item names
    sql = "SELECT d.DealCode, d.Discount, d.Descriptions, i.itemName " \
          "FROM Deals d " \
          "JOIN ItemsDeals id ON d.DealCode = id.DealCode " \
          "JOIN Items i ON id.ProductID = i.ProductID"
    cursor.execute(sql)

    # Process the results
    print("DEALS :")
    print("--------------------------------------------------------------------------------------------")
    for (dealCode, discount, description, itemName) in cursor:
        print("ITEM : {}, DEAL CODE : {}, DISCOUNT : {}%, DESCRIPTION : {}".format(itemName, dealCode, discount, description))
        print("------------------------------------------------------------------------------------------------------------------------")


class Item:
    def __init__(self, name, quantity, price):
        self.name = name
        self.quantity = quantity
        self.price = price
    
    def get_name(self):
        return self.name
    
    def get_quantity(self):
        return self.quantity
    
    def get_price(self):
        return self.price
    
    def update_quantity(self, new_quantity):
        self.quantity = new_quantity



def add_item_to_cart(conn, cursor):
    # Implementation to add items to cart
    # Store items in the cart
    cart_items = []
    total_amount = 0

    while True:
        print("\nOptions:")
        print("------------------------")
        print("1. PRESS 1 FOR ADDING ITEMS")
        print("------------------------")
        print("2. PRESS 2 FOR REMOVING ITEMS")
        print("------------------------")
        print("3. PRESS 3 FOR DISPLAYING CART")
        print("------------------------")
        print("4. PRESS 4 FOR PLACING ORDER")
        print("------------------------")
        option = int(input("Enter your choice: "))
        print("------------------------")  # Consume newline character

        if option == 1:
            add_item(conn, cursor, cart_items)
        elif option == 2:
            remove_item(cursor, cart_items)
        elif option == 3:
            display_cart(cart_items)
        elif option == 4:
            place_order(cart_items)
            return  # Exit the method after placing the order
        else:
            print("Invalid choice.")
def checkout(conn, cart_id, address,payment_mode ):
    try:
        cursor = conn.cursor()
        # Fetch product_ids from Contains_Products table for the given cart_id
        cursor.execute("SELECT product_id FROM Contains_Products WHERE cart_id = %s", (cart_id,))
        product_ids = cursor.fetchall()
        
        pids=()
        if not product_ids:
            print("No products found in the cart.")
            return
        
        for i in product_ids:
            pids=pids+(i[0],)
            data=[]
        for i in pids:
            cursor.execute("Select ofc_id from Stores where product_id=%s",(i,))
            data.append(cursor.fetchall())

        cursor.execute("SELECT count(*) from Order_Fulfillment_Centre")
        count=cursor.fetchone()[0]
        
        ofc_count=[0 for i in range(count)]
        for i in data:
            try:
                for j in range(count):
                    if i[j][0]==j+1:
                        ofc_count[j]+=1
            except:
                pass
        fin_ofcs=[]
        y=1
        for x in ofc_count:
            if x==len(pids):
                fin_ofcs.append(y)
                y+=1
        if len(fin_ofcs)==0:
            print('Products are not available in any Order Fulfillment Centre')
            return
        ofc_selected=random.choice(fin_ofcs)
        
        # Find delivery boys associated with the OFCs and select one with the least amount of orders delivered
        selected_delivery_boy_id = None
        min_orders_delivered = float('inf')

        
        cursor.execute("SELECT delivery_boy_id, orders_delivered FROM Delivery_Boy WHERE ofc_id = %s ORDER BY orders_delivered ASC", (ofc_selected,))
        delivery_boy_id, orders_delivered = cursor.fetchone()

        if orders_delivered < min_orders_delivered:
            selected_delivery_boy_id = delivery_boy_id
            min_orders_delivered = orders_delivered

        if selected_delivery_boy_id is None:
            print("No delivery boys available.")
            return

        # Insert an entry into the Order_ table
        cursor.execute("SELECT COUNT(*) FROM Order_")
        order_id = cursor.fetchone()[0] + 1
        cursor.execute("SELECT final_amount from Cart where cart_id=%s",(cart_id,))
        amount=cursor.fetchone()[0]
        current_time = datetime.datetime.now().strftime('%H:%M')

        cursor.execute("INSERT INTO Order_ (order_id, order_time, quantity, shipping_address, payment_mode, order_date, amount, cart_id, ofc_id, delivery_boy_id) VALUES (%s, %s, %s, %s, %s, CURDATE(), %s, %s, %s, %s)", 
                            (order_id, current_time, len(pids), address, payment_mode, amount, cart_id, ofc_selected, selected_delivery_boy_id))        
        # Delete products from Product and Stores table for the selected ofc_id
        for product_id in pids:
            cursor.execute("DELETE FROM Product WHERE product_id = %s", (product_id,))
            cursor.execute("DELETE FROM Stores WHERE product_id = %s AND ofc_id = %s", (product_id, ofc_selected))

        for i in pids:
            # Delete products from Contains_Products table for the specific ofc_id
            cursor.execute("DELETE FROM Contains_Products WHERE cart_id = %s AND product_id= %s", (cart_id, i))

        # Update final_amount, total_value, and product_count of the cart to 0
        cursor.execute("UPDATE Cart SET final_amount = 0, total_value = 0, product_count = 0 WHERE cart_id = %s", (cart_id,))      

        print("Order placed successfully. Order ID:", order_id)
        conn.commit()

    except Error as e:
        print("Error during checkout:", e)
        conn.rollback()

    finally:
        cursor.close()

def add_item(conn, cursor, cart_items):
    item_name = input("Enter item name: ").strip()
    print("------------------------")
    quantity = int(input("Enter quantity: "))
    print("------------------------")

    # Retrieve item details from the database
    search_sql = "SELECT QUANTITY, itemPrice FROM Items WHERE LOWER(itemName) LIKE LOWER(%s)"
    cursor.execute(search_sql, ("%" + item_name + "%",))
    result = cursor.fetchone()
    
    if result:
        available_quantity, item_price = result
        if quantity <= available_quantity:
            cart_items.append(Item(item_name, quantity, item_price))
            total_amount = calculate_total_amount(cart_items)
            print("\nItem added to cart. Total Amount: ${}".format(total_amount))
        else:
            print("Insufficient quantity available.")
    else:
        print("Item not found.")

def display_cart(cart_items):
    if not cart_items:
        print("Cart is empty.")
        return

    print("\nItems in the cart:")
    for item in cart_items:
        print("Item: {}, Quantity: {}, Total Amount: ${}".format(item.get_name(), item.get_quantity(), item.get_price() * item.get_quantity()))
    print("Total Cart Amount: ${}".format(calculate_total_amount(cart_items)))

def calculate_total_amount(cart_items):
    total_amount = sum(item.get_price() * item.get_quantity() for item in cart_items)
    return total_amount

def remove_item(cursor, cart_items):
    if not cart_items:
        print("Cart is empty.")
        return

    print("Items in the cart:")
    for i, item in enumerate(cart_items, 1):
        print("{}. {} - Quantity: {}".format(i, item.get_name(), item.get_quantity()))

    item_name = input("Enter the name of the item to remove: ")
    print("--------------------------------------")
    quantity_to_remove = int(input("Enter the quantity to remove: "))
    print("--------------------------------------")

    for item in cart_items:
        if item.get_name().lower() == item_name.lower():
            if item.get_quantity() > quantity_to_remove:
                item.update_quantity(item.get_quantity() - quantity_to_remove)
                total_amount = calculate_total_amount(cart_items)
                print("Item removed from cart. Total Amount: ${}".format(total_amount))
            elif item.get_quantity() == quantity_to_remove:
                cart_items.remove(item)
                total_amount = calculate_total_amount(cart_items)
                print("Item removed from cart. Total Amount: ${}".format(total_amount))
            else:
                print("Invalid quantity to remove.")
            break
    else:
        print("Item {} not found in the cart.".format(item_name))

def place_order(cart_items):
    # Calculate total amount
    total_amount = calculate_total_amount(cart_items)

    # Place order and perform necessary actions
    print("Order placed successfully.")
    print("\n------------------ THANK YOU FOR ORDERING ------------------")
    # Additional actions to finalize the order


def connect_to_database():
    try:
        conn = mysql.connector.connect(
            host='localhost',
            database='sasta_amazon', # Change to your database name
            user='root',
            password='airtelD2H@123'
        )
        if conn.is_connected():
            print("Connected to MySQL database")
            return conn
    except Error as e:
        print("Error connecting to MySQL database:", e)


def customer_login(conn):
    username = input("Enter your username: ")
    password = input("Enter your password: ")

    cursor = conn.cursor()

    # Query to fetch customer details based on username
    query = "SELECT customer_id, password FROM Customer WHERE login_id = %s"
    cursor.execute(query, (username,))
    customer = cursor.fetchone()


    if customer:
        print(customer[1])
        # Check if the provided password matches the password in the database
        if password == customer[1]:
            print("Login successful as customer!")
            customer_id = customer[0]
            # Perform further operations as needed
            return customer_id
        else:
            print("Incorrect password")
    else:
        print("Customer with that username not found")

    cursor.close()



def admin_login(conn):
    username = input("Enter your username: ")
    password = input("Enter your password: ")

    # Connect to your MySQL database
    conn = mysql.connector.connect(
        host="localhost",
        user="root",
        password="airtelD2H@123",
        database="sasta_amazon"
    )
    cursor = conn.cursor()

    query = "SELECT admin_id, password FROM Admin_ WHERE email_id = %s"
    cursor.execute(query, (username,))
    admin = cursor.fetchone()

    if admin:
        # Check if the provided password matches the password in the database
        if password == admin[1]:
            print("Login successful as admin!")
            admin_id = admin[0]
            return admin_id
        else:
            print("Incorrect password")
            return -1
    else:
        print("Admin with that email not found")
        return -1

def seller_login(conn):
    username = input("Enter your username: ")
    password = input("Enter your password: ")

    cursor = conn.cursor()

    query = "SELECT seller_id, password FROM Seller WHERE email = %s"
    cursor.execute(query, (username,))
    seller = cursor.fetchone()

    if seller:
        # Check if the provided password matches the password in the database
        if password == seller[1]:
            print("Login successful as seller!")
            seller_id = seller[0]
            return seller_id
        else:
            print("Incorrect password")
            return -1
    else:
        print("Seller with that email not found")
        return -1
    

def change_product_cost(seller_id, product_id, new_price):
    conn = connect_to_database()
    cursor = conn.cursor()

    try:
        # Check if the product belongs to the seller
        cursor.execute("SELECT seller_id FROM Products WHERE product_id = %s", (product_id,))
        result = cursor.fetchone()

        if result and result[0] == seller_id:
            # Update the price of the product
            cursor.execute("UPDATE Products SET price = %s WHERE product_id = %s", (new_price, product_id))
            conn.commit()
            print("Product price updated successfully.")
        else:
            print("Product does not belong to the seller.")
    except Error as e:
        print("Error updating product price:", e)
    finally:
        cursor.close()
        conn.close()

def discontinue_product(seller_id, product_id):
    conn = connect_to_database()
    cursor = conn.cursor()

    try:
        # Check if the product belongs to the seller
        cursor.execute("SELECT seller_id FROM Products WHERE product_id = %s", (product_id,))
        result = cursor.fetchone()

        if result and result[0] == seller_id:
            # Delete the product from the database
            cursor.execute("DELETE FROM Products WHERE product_id = %s", (product_id,))
            conn.commit()
            print("Product discontinued successfully.")
        else:
            print("Product does not belong to the seller.")
    except Error as e:
        print("Error discontinuing product:", e)
    finally:
        cursor.close()
        conn.close()


# Admin functionalities
def admin_menu(admin_id):
    print("Welcome, Admin!")
    print("1. Add delivery boy")
    print("2. Add worker")
    print("3. Add special offer")
    print("4. Remove special offer")
    print("5. Add seller")
    print("6. Remove seller")
    print("7. View all orders")
    choice = input("Enter your choice: ")
    if choice == '1':
        # Collect delivery boy details
        first_name = input("Enter first name of delivery boy: ")
        last_name = input("Enter last name of delivery boy: ")
        mobile_number = input("Enter mobile number of delivery boy: ")
        email_id = input("Enter email id of delivery boy: ")
        rating = float(input("Enter rating of delivery boy: "))
        salary = float(input("Enter salary of delivery boy: "))
        ofc_id = int(input("Enter office ID of delivery boy: "))
        add_delivery_boy(first_name, last_name, mobile_number, email_id, rating, salary, ofc_id, admin_id, 0)
    elif choice == '2':
        # Collect worker details
        salary = float(input("Enter salary of worker: "))
        email = input("Enter email of worker: ")
        mobile = input("Enter mobile of worker: ")
        first_name = input("Enter first name of worker: ")
        last_name = input("Enter last name of worker: ")
        add_worker(salary, email, mobile, first_name, last_name, admin_id)
    elif choice == '3':
        # Collect special offer details
        offer_code = input("Enter offer code: ")
        maximum_discount = float(input("Enter maximum discount: "))
        percentage_discount = float(input("Enter percentage discount: "))
        minimum_order_value = float(input("Enter minimum order value: "))
        add_special_offer(offer_code, maximum_discount, percentage_discount, minimum_order_value, admin_id)
    elif choice == '4':
        offer_id = int(input("Enter the ID of the special offer to remove: "))
        remove_special_offer(offer_id)
    elif choice == '5':
        # Collect seller details
        password = input("Enter password for seller: ")
        email = input("Enter email of seller: ")
        phone_number = input("Enter phone number of seller: ")
        first_name = input("Enter first name of seller: ")
        last_name = input("Enter last name of seller: ")
        add_seller(password, email, phone_number, first_name, last_name, admin_id)
    elif choice == '6':
        seller_id = int(input("Enter the ID of the seller to remove: "))
        remove_seller(seller_id)
    elif choice == '7':
        view_all_orders()
    else:
        print("Invalid choice")

def seller_menu(seller_id):
    print("Welcome, Seller!")
    print("1. Sell products")
    print("2. Change product cost")
    print("3. Discontinue selling a product")
    print("4. Exit")

    choice = input("Enter your choice: ")
    if choice == '1':
        pass
    elif choice == '2':
        # Change product cost
        product_id = int(input("Enter the ID of the product to update: "))
        new_price = float(input("Enter the new price of the product: "))
        # Call the correct function with proper parameters
        change_product_cost(seller_id, product_id, new_price)
    elif choice == '3':
        # Discontinue selling a product
        product_id = int(input("Enter the ID of the product to discontinue: "))
        # Call the correct function with proper parameters
        discontinue_product(seller_id, product_id)
    elif choice == '4':
        print("Exiting...")
    else:
        print("Invalid choice")

def main():
    conn = connect_to_database()
    if conn:
        try:
            cursor = conn.cursor()  # Create cursor object
            
            while True:
                print("\nSelect an option:")
                print("1. Login as Customer")
                print("2. Login as Admin")
                print("3. Login as Seller")
                print("4. Exit")
                choice = input("Enter your choice: ")

                if choice == '1':
                    customer_id = customer_login(conn)
                    if customer_id:
                        cursor.execute("Select offer_id from Cart where Customer_id=%s",(customer_id,))
                        print(cursor.fetchone()[0])
                        q="select cart_id from Cart where customer_id= %s"
                        cursor.execute(q,(customer_id,))
                        cart_id=cursor.fetchone()
                        while True:
                            print("\nSelect an option:")
                            print("1. Add Product To Cart")
                            print("2. View Products-All or By Category")
                            print("3. Apply Special Offers")
                            print("4. View Order Status")
                            print("5. View Cart")
                            print("6. Remove product from cart")
                            print("7. Checkout")
                            print("10. Exit")
                            inner_choice = input("Enter your choice: ")
                            if inner_choice == '1':                                
                                view_products(conn)
                                name=input("Enter Name Of Product To Be Added To Cart: ")
                                add_product_to_cart(conn, cart_id[0], name)
                            elif inner_choice== '2':
                                print("1. View All Products")
                                print("2. View Products By Category")
                                ch=int(input("Enter choice(1/2): "))
                                if ch==1:
                                    view_products(conn)
                                elif ch==2:
                                    print_all_categories(cursor)
                                    categ=input("Enter category : ")
                                    print_products_by_category(cursor, categ)
                                else:
                                    print("Wrong choice entered")
                            elif inner_choice == '3':
                                q="select cart_id from Cart where customer_id= %s"
                                cursor.execute(q,(customer_id,))
                                cart_id=cursor.fetchone()
                                view_all_special_offers(cursor)
                                cursor.execute("select offer_id from Cart where cart_id=%s",(cart_id[0],))
                                offer_id=cursor.fetchone()[0]
                                offer_code=input("Enter Offer Code You Want To Apply: ")
                                apply_special_offer(conn, customer_id, cart_id[0], offer_code)  # Pass customer_id and cart_id
                            elif inner_choice=='4':
                                view_order_status(conn,customer_id)
                            elif inner_choice=='5':
                                view_cart(cursor,cart_id[0])
                            elif inner_choice=='6':
                                view_cart(cursor, cart_id[0])
                                pname=input("Enter product name to remove: ")
                                remove_product_from_cart(conn,cart_id[0],pname)
                            elif inner_choice=='7':
                                address=input("Enter Address: ")
                                payment_mode=input("Enter Payment Mode: ")
                                checkout(conn,cart_id[0],address,payment_mode)    
                            elif inner_choice == '10':
                                print("Exiting...")
                                break
                            else:
                                print("Invalid choice. Please try again.")
                elif choice == '2':
                    admin_id = admin_login(conn)
                    if admin_id != -1:
                        admin_menu(admin_id)
                elif choice == '3':
                    seller_id = seller_login(conn)
                    if seller_id != -1:
                        seller_menu(seller_id)
                elif choice == '4':
                    print("Exiting...")
                    break
                else:
                    print("Invalid choice. Please try again.")
        finally:
            conn.close()
            print("MySQL connection closed")

if __name__ == "__main__":
    main()  
